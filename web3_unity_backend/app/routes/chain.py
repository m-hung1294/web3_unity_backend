from fastapi import APIRouter, Query
from typing import Optional

router = APIRouter()

# -------------------------------
# üü¢ 1. Ki·ªÉm tra tr·∫°ng th√°i chain
# -------------------------------
@router.get("/status")
async def get_chain_status():
    """
    Ki·ªÉm tra tr·∫°ng th√°i backend chain service.
    """
    return {
        "status": "‚úÖ Chain API active",
        "network": "local",
        "provider": "http://127.0.0.1:8545"
    }

# -------------------------------
# üîµ 2. L·∫•y th√¥ng tin m·∫°ng (network info)
# -------------------------------
@router.get("/network")
async def get_network_info():
    """
    Tr·∫£ th√¥ng tin m·∫°ng blockchain.
    """
    return {
        "chain_id": 1337,
        "network_name": "Localhost",
        "rpc_url": "http://127.0.0.1:8545",
        "symbol": "ETH",
        "decimals": 18
    }

# -------------------------------
# üü£ 3. L·∫•y th√¥ng tin block hi·ªán t·∫°i (gi·∫£ l·∫≠p)
# -------------------------------
@router.get("/block/latest")
async def get_latest_block():
    """
    Tr·∫£ block number gi·∫£ l·∫≠p (demo).
    """
    # ·ªû ƒë√¢y c√≥ th·ªÉ g·ªçi web3.eth.block_number n·∫øu ƒë√£ config web3_service
    latest_block = 1234567
    return {"latest_block": latest_block}

# -------------------------------
# üü° 4. L·∫•y s·ªë d∆∞ v√≠ (mock ho·∫∑c th·∫≠t)
# -------------------------------
@router.get("/balance")
async def get_wallet_balance(address: Optional[str] = Query(None, description="ƒê·ªãa ch·ªâ v√≠ c·∫ßn ki·ªÉm tra")):
    """
    L·∫•y s·ªë d∆∞ v√≠ (t·∫°m th·ªùi mock, c√≥ th·ªÉ t√≠ch h·ª£p Web3 sau).
    """
    if not address:
        return {"error": "Missing address parameter"}
    # T·∫°m th·ªùi gi·∫£ l·∫≠p s·ªë d∆∞
    return {"address": address, "balance": "0.1234 ETH"}
