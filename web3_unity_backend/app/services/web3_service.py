import os
from web3 import Web3

# -------------------------------------
# üåê Global Web3 state
# -------------------------------------
w3 = None
RPC_URL = None
CHAIN_ID = None
NFT_CONTRACT = None


# -------------------------------------
# üöÄ Kh·ªüi t·∫°o m·∫∑c ƒë·ªãnh khi backend start
# -------------------------------------
def init_default_config():
    """
    Load config t·ª´ .env khi server kh·ªüi ƒë·ªông.
    N·∫øu .env kh√¥ng c√≥, s·∫Ω t·ª± g√°n gi√° tr·ªã m·∫∑c ƒë·ªãnh local.
    """
    global RPC_URL, CHAIN_ID, NFT_CONTRACT, w3

    RPC_URL = (os.getenv("RPC_URL") or "http://127.0.0.1:8545").strip()
    CHAIN_ID = int(os.getenv("CHAIN_ID") or 1337)
    NFT_CONTRACT = (os.getenv("NFT_CONTRACT") or "0x0000000000000000000000000000000000000000").strip()

    try:
        w3 = Web3(Web3.HTTPProvider(RPC_URL))
        if w3.is_connected():
            print(f"‚úÖ Web3 connected to {RPC_URL} (chain={CHAIN_ID})")
        else:
            print(f"‚ö†Ô∏è Web3 not connected at {RPC_URL} (chain={CHAIN_ID})")
    except Exception as e:
        w3 = None
        print(f"‚ùå Web3 initialization failed: {e}")


# -------------------------------------
# üîß C·∫≠p nh·∫≠t config runtime (Unity g·ª≠i l√™n)
# -------------------------------------
def set_config(rpc_url: str, chain_id: int, nft_contract: str):
    """C·∫≠p nh·∫≠t c·∫•u h√¨nh khi Unity g·ª≠i qua API."""
    global RPC_URL, CHAIN_ID, NFT_CONTRACT, w3
    RPC_URL, CHAIN_ID, NFT_CONTRACT = rpc_url, chain_id, nft_contract

    try:
        w3 = Web3(Web3.HTTPProvider(RPC_URL))
        if w3.is_connected():
            print(f"‚úÖ Config updated: {RPC_URL} | chain={CHAIN_ID} | contract={NFT_CONTRACT}")
        else:
            print(f"‚ö†Ô∏è Web3 connection failed for {RPC_URL}")
    except Exception as e:
        w3 = None
        print(f"‚ùå Error setting Web3 config: {e}")


# -------------------------------------
# üí∞ L·∫•y s·ªë d∆∞ v√≠
# -------------------------------------
def get_balance(address: str):
    """Tr·∫£ v·ªÅ s·ªë d∆∞ c·ªßa ƒë·ªãa ch·ªâ v√≠ (ETH)."""
    if not w3:
        raise RuntimeError("Web3 ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o.")

    try:
        balance_wei = w3.eth.get_balance(address)
        return w3.from_wei(balance_wei, "ether")
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói get_balance: {e}")
        return None


# -------------------------------------
# üî¢ L·∫•y block m·ªõi nh·∫•t
# -------------------------------------
def get_latest_block():
    """Tr·∫£ v·ªÅ block number hi·ªán t·∫°i."""
    if not w3:
        raise RuntimeError("Web3 ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o.")
    try:
        return w3.eth.block_number
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói get_latest_block: {e}")
        return None


# -------------------------------------
# üß© Ki·ªÉm tra k·∫øt n·ªëi Web3
# -------------------------------------
def is_connected():
    """Tr·∫£ True n·∫øu Web3 ƒëang k·∫øt n·ªëi RPC h·ª£p l·ªá."""
    return w3 is not None and w3.is_connected()


# -------------------------------------
# üî® Build transaction c∆° b·∫£n (EIP-1559 fallback)
# -------------------------------------
def build_tx_common(acct_addr: str):
    """Build transaction c∆° b·∫£n cho blockchain."""
    if not w3:
        raise RuntimeError("‚ùå Web3 ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh!")

    base = {
        "from": acct_addr,
        "nonce": w3.eth.get_transaction_count(acct_addr),
        "chainId": CHAIN_ID,
        "gas": 300000,
    }

    try:
        # N·∫øu RPC h·ªó tr·ª£ EIP-1559
        _ = w3.eth.fee_history(1, "latest", [10])
        base["maxFeePerGas"] = w3.to_wei("2", "gwei")
        base["maxPriorityFeePerGas"] = w3.to_wei("1", "gwei")
    except Exception:
        base["gasPrice"] = w3.to_wei("2", "gwei")

    return base
